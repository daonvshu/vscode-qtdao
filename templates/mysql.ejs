/********************************************************************************
 ** This file is auto generated by vscode-qtdao.
 ** Don't modify this file!
********************************************************************************/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>
<%# "-------------- custom type header --------------" -%>
<% if (customTypeHeaders.length !== 0) { -%>
<%- '\n' -%>
<% customTypeHeaders.forEach(header => { -%>
    <%_ if (header.endsWith(".h")) { -%>
#include "<%- header %>"
    <%_ } else { -%>
#include <<%- header %>>"
    <%_ } -%>
<% }) -%>
<% } -%>

#include "condition/entityfield.h"
#include "condition/foreignkey.h"

class <%- className %> {
<%# "-------------- declare metetype --------------" -%>
<% if (declareMetaType) { -%>
    Q_GADGET

    <%_ fields.forEach(field => { -%>
    Q_PROPERTY(<%- field.cppType %> <%- field.name %> MEMBER <%- field.name %>)
    <%_ }) %>
<% } -%>
public:
<%# "-------------- member declare --------------" -%>
<% members.forEach(member => { -%>
    <%- member.comment %>
    <%- member.declare %>

<% }) -%>
    QVariantMap __extra;

public:
    <%- className %> () {}
<%# "-------------- construct declare --------------" -%>
<% if (constructFields.length !== 0) { -%>
<% constructFields.forEach(fields => { -%>

    <%- className %> (
<% fields.forEach((field, index) => { -%>
        const <%- field.cppType %>& <%- field.name %><% if(index !== fields.length - 1) { %>,<% } %>
<% }) -%>
    )
<% fields.forEach((field, index) => { -%>
    <% if(index === 0) { %>:<% } else { %>,<% } %> <%- field.name %>(<%- field.name %>)
<% }) -%>
    {}
<% }) -%>
<% } -%>

public:
    class Fields {
    public:
<%# "-------------- table field declare --------------" -%>
<% fieldWithoutTransient.forEach((field, index) => { -%>
        dao::EntityField<<%- field.cppType %>> <%- field.name %>{QLatin1String("<%- nameInDatabase(field.name) %>"), QLatin1String("<%- tableName %>"), <%- field.useCustomType %>};
<% }) %>
    protected:
        void reset(const QString& tbName) {
<%# "-------------- table field reset declare --------------" -%>
<% fieldWithoutTransient.forEach(field => { -%>
            <%- field.name %>.resetTb(tbName);
<% }) -%>        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return <%- fieldWithoutTransient.length %>;
        }

        static QString getTableName() {
            return QLatin1String("<%- tableName %>");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QString getTableEngine() {
            <%_ if (engine.isEmpty()) { -%>
            return {};
            <%_ } else { -%>
            return QLatin1String("<%- engine %>");
            <%_ } -%>
        }

        static QStringList getFields() {
            return {
                <%_ fieldWithoutTransient.forEach(field => { -%>
                QLatin1String("<%- nameInDatabase(field.name) %>"),
                <%_ }) -%>
            };
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return {
                <%_ fieldWithoutTransient.forEach(field => { -%>
                    <%_ if (!field.autoIncrement) { -%>
                QLatin1String("<%- nameInDatabase(field.name) %>"),
                    <%_ } -%>
                <%_ }) -%>
            };
        }

        static QStringList getFieldsType() {
            return {
                <%_ databaseMemberDeclare.forEach(str => { -%>
                QStringLiteral("<%- str %>"),
                <%_ }) -%>
            };
        }

        static QStringList getPrimaryKeys() {
            return {
                <%_ fieldWithoutTransient.forEach(field => { -%>
                    <%_ if (field.constraint === 'primary key') { -%>
                QLatin1String("<%- nameInDatabase(field.name) %>"),
                    <%_ } -%>
                <%_ }) -%>
            };
        }

        static QList<QStringList> getIndexFields() {
            return {
                <%_ indexes.forEach(index => { -%>
                    <%_ if (index.indexType === 'index') { -%>
                { <%- index.fields.map(field => nameInDatabase(field)).escapeMerge(', ') %> },
                    <%_ } -%>
                <%_ }) -%>
            };
        }

        static QList<QStringList> getUniqueIndexFields() {
            return {
                <%_ indexes.forEach(index => { -%>
                    <%_ if (index.indexType === 'unique index') { -%>
                { <%- index.fields.map(field => nameInDatabase(field)).escapeMerge(', ') %> },
                    <%_ } -%>
                <%_ }) -%>
            };
        }

        static bool isAutoIncrement(const QString& name) {
            return 
            <%_ if (autoincFields.length !== 0) { -%>
                <%_ autoincFields.forEach((field, index) => { -%>
                name == QLatin1String("<%- nameInDatabase(field.name) %>")<% if (index !== autoincFields.length - 1) { %> ||<% } %>
                <%_ }) -%>
                ;
            <%_ } else { -%>
                false;
            <%_ } -%>
        }

        static QList<ForeignKey> getForeignKeys() {
            return {
                <%_ foreignKeys.forEach(key => { -%>
                    <%_ if (!key.referTable.isEmpty()) { -%>
                ForeignKey(QLatin1String("<%- databaseTbNameFormat(key.referTable) %>"), <%- foreignKeyActionToEnum(key.onUpdateAction) %>, <%- foreignKeyActionToEnum(key.onDeleteAction) %>, <%- key.deferrable %>).field(<%- key.referFields.escapeMerge(", ") %>),
                    <%_ } -%>
                <%_ }) -%>
            };
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const <%- className %>& entity) {
            return QVariantList()
                <%_ fieldWithoutTransient.forEach(field => { -%>
                    <%_ if (!field.autoIncrement) { -%>
                << <%- serializableName(field) %>
                    <%_ } -%>
                <%_ }) -%>
            ;
        }

        static QVariant getValueByName(const <%- className %>& entity, const QString& target) {
            <%_ fieldWithoutTransient.forEach(field => { -%>
            if (target == QLatin1String("<%- field.name.snakeCase() %>")) {
                return <%- serializableName(field) %>;
            }
            <%_ }) -%>
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(<%- className %>& entity, const QVariant& id) {
            <%_ if (autoincFields.length !== 0) { -%>
            entity.<%- autoincFields[0].name %> = id.value<<%- autoincFields[0].cppType %>>();
            <%_ } -%>
        }

        static void bindValue(<%- className %>& entity, const QString& target, QVariant value) {
            <%_ fieldWithoutTransient.forEach((field, index) => { -%>
            <%- index === 0 ? "" : "else " %>if (target == QLatin1String("<%- field.name.snakeCase() %>")) {
                entity.<%- field.name %> = <%- checkSerialzableValue(field) %>;
            }
            <%_ }) -%>
            else {
                entity.__putExtra(target, value);
            }
        }

        static <%- className %> fromJson(const QJsonObject& object) {
            <%- className %> entity;
            <%_ fromJsonDeclares.forEach(str => { -%>
            <%- str %>
            <%_ }) -%>
            return entity;
        }

        static QJsonObject toJson(const <%- className %>& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            <%_ toJsonDeclares.forEach(str => { -%>
            <%- str %>
            <%_ }) -%>

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

    bool operator==(const <%- className %>& other) const {
        return 
        <%_ let unAutoIncFields = fieldWithoutTransient.filter(field => !field.autoIncrement); -%>
        <%_ unAutoIncFields.forEach((field, index) => { -%>
            <%- field.name %> == other.<%- field.name %><%- index === unAutoIncFields.length - 1 ? "" : " &&" %>
        <%_ }) -%>
        ;
    }

    bool operator!=(const <%- className %>& other) const {
        return !(*this == other);
    }

public:
    //set temp data
    void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    template <typename T>
    T __getExtra(const QString& key) const {
        return __extra[key].value<T>();
    }
};
typedef QList<<%- className %>> <%- className %>List;
<% if (declareMetaType) { -%>
Q_DECLARE_METATYPE(<%- className %>);
<% } %>