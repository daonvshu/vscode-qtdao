/********************************************************************************
 ** This file is auto generated by vscode-qtdao.
 ** Don't modify this file!
********************************************************************************/
#pragma once

#include "<%- className.toLowerCase() %>.h"

int <%- className %>::Info::fieldSize() {
    return <%- fieldWithoutTransient.length %>;
}

QString <%- className %>::Info::getTableName() {
    return QLatin1String("<%- tableName %>");
}

QString <%- className %>::Info::getSourceName() {
    return getTableName();
}

QString <%- className %>::Info::getTableEngine() {
    <%_ if (engine.isEmpty()) { -%>
    return {};
    <%_ } else { -%>
    return QLatin1String("<%- engine %>");
    <%_ } -%>
}

QStringList <%- className %>::Info::getFields() {
    return {
        <%_ fieldWithoutTransient.forEach(field => { -%>
        QLatin1String("<%- nameInDatabase(field.name) %>"),
        <%_ }) -%>
    };
}

QStringList <%- className %>::Info::getFieldsWithoutAutoIncrement() {
    return {
        <%_ fieldWithoutTransient.forEach(field => { -%>
            <%_ if (!field.autoIncrement) { -%>
        QLatin1String("<%- nameInDatabase(field.name) %>"),
            <%_ } -%>
        <%_ }) -%>
    };
}

QStringList <%- className %>::Info::getFieldsType() {
    return {
        <%_ databaseMemberDeclare.forEach(str => { -%>
        QStringLiteral("<%- str %>"),
        <%_ }) -%>
    };
}

QStringList <%- className %>::Info::getPrimaryKeys() {
    return {
        <%_ fieldWithoutTransient.forEach(field => { -%>
            <%_ if (field.constraint === 'primary key') { -%>
        QLatin1String("<%- nameInDatabase(field.name) %>"),
            <%_ } -%>
        <%_ }) -%>
    };
}

QList<QStringList> <%- className %>::Info::getIndexFields() {
    return {
        <%_ indexes.forEach(index => { -%>
            <%_ if (index.indexType === 'index') { -%>
        { <%- index.fields.map(field => nameInDatabase(field)).escapeMerge(', ') %> },
            <%_ } -%>
        <%_ }) -%>
    };
}

QList<QStringList> <%- className %>::Info::getUniqueIndexFields() {
    return {
        <%_ indexes.forEach(index => { -%>
            <%_ if (index.indexType === 'unique index') { -%>
        { <%- index.fields.map(field => nameInDatabase(field)).escapeMerge(', ') %> },
            <%_ } -%>
        <%_ }) -%>
    };
}

bool <%- className %>::Info::isAutoIncrement(const QString& name) {
    return 
    <%_ if (autoincFields.length !== 0) { -%>
        <%_ autoincFields.forEach((field, index) => { -%>
        name == QLatin1String("<%- nameInDatabase(field.name) %>")<% if (index !== autoincFields.length - 1) { %> ||<% } %>
        <%_ }) -%>
        ;
    <%_ } else { -%>
        false;
    <%_ } -%>
}

QList<ForeignKey> <%- className %>::Info::getForeignKeys() {
    return {
        <%_ foreignKeys.forEach(key => { -%>
            <%_ if (!key.referTable.isEmpty()) { -%>
        ForeignKey(QLatin1String("<%- databaseTbNameFormat(key.referTable) %>"), <%- foreignKeyActionToEnum(key.onUpdateAction) %>, <%- foreignKeyActionToEnum(key.onDeleteAction) %>, <%- key.deferrable %>).field(<%- key.referFields.escapeMerge(", ") %>),
            <%_ } -%>
        <%_ }) -%>
    };
}
    
QVariantList <%- className %>::Tool::getValueWithoutAutoIncrement(const <%- className %>& entity) {
    return QVariantList()
        <%_ fieldWithoutTransient.forEach(field => { -%>
            <%_ if (!field.autoIncrement) { -%>
        << <%- serializableName(field) %>
            <%_ } -%>
        <%_ }) -%>
    ;
}

QVariant <%- className %>::Tool::getValueByName(const <%- className %>& entity, const QString& target) {
    <%_ fieldWithoutTransient.forEach(field => { -%>
    if (target == QLatin1String("<%- field.name.snakeCase() %>")) {
        return <%- serializableName(field) %>;
    }
    <%_ }) -%>
    return entity.__extra.value(target);
}

void <%- className %>::Tool::bindAutoIncrementId(<%- className %>& entity, const QVariant& id) {
    <%_ if (autoincFields.length !== 0) { -%>
    entity.<%- autoincFields[0].name %> = id.value<<%- autoincFields[0].cppType %>>();
    <%_ } -%>
}

void <%- className %>::Tool::bindValue(<%- className %>& entity, const QString& target, QVariant value) {
    <%_ fieldWithoutTransient.forEach((field, index) => { -%>
    <%- index === 0 ? "" : "else " %>if (target == QLatin1String("<%- field.name.snakeCase() %>")) {
        entity.<%- field.name %> = <%- checkSerialzableValue(field) %>;
    }
    <%_ }) -%>
    else {
        entity.__putExtra(target, value);
    }
}

<%- className %> <%- className %>::Tool::fromJson(const QJsonObject& object) {
    <%- className %> entity;
    <%_ fromJsonDeclares.forEach(str => { -%>
    <%- str %>
    <%_ }) -%>
    return entity;
}

QJsonObject <%- className %>::Tool::toJson(const <%- className %>& entity, QStringList excludeKeys) {
    QJsonObject object;
    <%_ toJsonDeclares.forEach(str => { -%>
    <%- str %>
    <%_ }) -%>

    for (const auto& key : excludeKeys) {
        object.remove(key);
    }
    return object;
}

bool <%- className %>::operator==(const <%- className %>& other) const {
    return 
    <%_ let unAutoIncFields = fieldWithoutTransient.filter(field => !field.autoIncrement); -%>
    <%_ unAutoIncFields.forEach((field, index) => { -%>
        <%- field.name %> == other.<%- field.name %><%- index === unAutoIncFields.length - 1 ? "" : " &&" %>
    <%_ }) -%>
    ;
}

bool <%- className %>::operator!=(const <%- className %>& other) const {
    return !(*this == other);
}

<% if (autoincFields.length === 1) { -%>
#include <dao.h>

void <%- className %>::insert() {
    dao::_insert<<%- className %>>().build().insert(*this);
}

void <%- className %>::update() {
    dao::_update<<%- className %>>().build().update(*this);
}

void <%- className %>::select() {
    Fields field;
    *this = dao::_select<<%- className %>>().filter(field.<%- autoincFields[0].name %> == <%- autoincFields[0].name %>).build().unique();
}

<%- className %> <%- className %>::select(const <%- autoincFields[0].cppType %>& <%- autoincFields[0].name %>) {
    Fields field;
    return dao::_select<<%- className %>>().filter(field.<%- autoincFields[0].name %> == <%- autoincFields[0].name %>).build().unique();
}

void <%- className %>::remove() {
    dao::_delete<<%- className %>>().build().deleteBy(*this);
}

void <%- className %>::remove(const <%- autoincFields[0].cppType %>& <%- autoincFields[0].name %>) {
    Fields field;
    dao::_delete<<%- className %>>().filter(field.<%- autoincFields[0].name %> == <%- autoincFields[0].name %>).build().deleteBy();
}
<% } -%>