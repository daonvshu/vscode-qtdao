/********************************************************************************
 ** This file is auto generated by vscode-qtdao.
 ** Don't modify this file!
********************************************************************************/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>
<%# "-------------- custom type header --------------" -%>
<% if (customTypeHeaders.length !== 0) { -%>
<%- '\n' -%>
<% customTypeHeaders.forEach(header => { -%>
    <%_ if (header.endsWith(".h")) { -%>
#include "<%- header %>"
    <%_ } else { -%>
#include <<%- header %>>
    <%_ } -%>
<% }) -%>
<% } -%>
<%# "-------------- foreign key link headers --------------" -%>
<% if (foreignKeyLinks.length !== 0) { -%>
<%- '\n' -%>
<% Array.from(new Set(foreignKeyLinks.flatMap(foreignKey => foreignKey.table.toLowerCase()))).forEach(name => { -%>
#include "<%- name %>.h"
<% }) -%>
<% } -%>

#include "condition/entityfield.h"
#include "condition/foreignkey.h"

class <%- className %> {
<%# "-------------- declare metetype --------------" -%>
<% if (declareMetaType) { -%>
    Q_GADGET

    <%_ fields.forEach(field => { -%>
    Q_PROPERTY(<%- field.cppType %> <%- field.name %> MEMBER <%- field.name %>)
    <%_ }) %>
<% } -%>
public:
<%# "-------------- member declare --------------" -%>
<% members.forEach(member => { -%>
    <%- member.comment %>
    <%- member.declare %>

<% }) -%>
    QVariantMap __extra;

public:
    <%- className %> () {}
<%# "-------------- construct declare --------------" -%>
<% if (constructFields.length !== 0) { -%>
<% constructFields.forEach(fields => { -%>

    <%- className %> (
<% fields.forEach((field, index) => { -%>
        const <%- field.cppType %>& <%- field.name %><% if(index !== fields.length - 1) { %>,<% } %>
<% }) -%>
    )
<% fields.forEach((field, index) => { -%>
    <% if(index === 0) { %>:<% } else { %>,<% } %> <%- field.name %>(<%- field.name %>)
<% }) -%>
    {}
<% }) -%>
<% } -%>

public:
    class Fields {
    public:
<%# "-------------- table field declare --------------" -%>
<% fieldWithoutTransient.forEach((field, index) => { -%>
        dao::EntityField<<%- field.cppType %>> <%- field.name %>{QLatin1String("<%- nameInDatabase(field.name) %>"), QLatin1String("<%- tableName %>"), <%- field.useCustomType %>};
<% }) %>
    protected:
        void reset(const QString& tbName) {
<%# "-------------- table field reset declare --------------" -%>
<% fieldWithoutTransient.forEach(field => { -%>
            <%- field.name %>.resetTb(tbName);
<% }) -%>        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize();

        static QString getTableName();

        static QString getSourceName();

        static QString getTableEngine();

        static QStringList getFields();

        static QStringList getFieldsWithoutAutoIncrement();

        static QStringList getFieldsType();

        static QStringList getPrimaryKeys();

        static QList<QStringList> getIndexFields();

        static QList<QStringList> getUniqueIndexFields();

        static bool isAutoIncrement(const QString& name);

        static QList<ForeignKey> getForeignKeys();
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const <%- className %>& entity);

        static QVariant getValueByName(const <%- className %>& entity, const QString& target);

        static void bindAutoIncrementId(<%- className %>& entity, const QVariant& id);

        static void bindValue(<%- className %>& entity, const QString& target, QVariant value);

        static <%- className %> fromJson(const QJsonObject& object);

        static QJsonObject toJson(const <%- className %>& entity, QStringList excludeKeys = QStringList());
    };

    bool operator==(const <%- className %>& other) const;

    bool operator!=(const <%- className %>& other) const;
<%# "-------------- if foreign key link tables is not empty, add 'get' functions by foreign key field --------------" -%>
    <%_ if (foreignKeyLinks.length !== 0) { -%>
        <%_ foreignKeyLinks.forEach(foreignkey => { %>
    <%- foreignkey.table %>List get<%- foreignkey.table %>By<%- foreignkey.referFields.filter((field, index) => index % 2 === 1).map(field => field.pascalCase()).merge() %>();
        <%_ }) -%>
    <%_ } -%>
<%# "-------------- if have only one primary key, add insert/update/remove/select functions use by primary key field --------------" -%>
    <%_ if (autoincFields.length === 1) { -%>
    <%- '\n' -%>
    void insert();

    void update() const;

    void select();

    static <%- className %> select(const <%- autoincFields[0].cppType %>& <%- autoincFields[0].name %>);

    void remove() const;

    static void remove(const <%- autoincFields[0].cppType %>& <%- autoincFields[0].name %>);
    <%_ } -%>

public:
    //set temp data
    void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    template <typename T>
    T __getExtra(const QString& key) const {
        return __extra[key].value<T>();
    }
};
typedef QList<<%- className %>> <%- className %>List;
<% if (declareMetaType) { -%>
Q_DECLARE_METATYPE(<%- className %>);
<% } %>